* Github Example
** Test URL
  https://developer.github.com/v4/explorer/
** Query example
*** Simple Query
# We'll get you started with a simple query showing your username!
query { 
  viewer {
    id
    name
    company
  }
}
*** Complex Query
**** Input
{
   viewer {
     followers(first: 10) {
       edges {
         node {
           name
           repositories(first: 5) {
             edges {
               node {
                 name
               }
             }
           }
         }
       }
     }
   }
}
**** Output
{
  "data": {
    "viewer": {
      "followers": {
        "edges": [
          {
            "node": {
              "name": null,
              "repositories": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "name": "Denny Chitwood",
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "7hillsleague.org"
                    }
                  },
                  {
                    "node": {
                      "name": "milfordkickers.org"
                    }
                  },
                  {
                    "node": {
                      "name": "SmartThingsPublic"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "name": null,
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "DatStr02"
                    }
                  },
                  {
                    "node": {
                      "name": "DatStr03"
                    }
                  },
                  {
                    "node": {
                      "name": "DatStr04"
                    }
                  },
                  {
                    "node": {
                      "name": "DatStr06"
                    }
                  },
                  {
                    "node": {
                      "name": "ProgLangProj"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "name": "Shaishav Shah",
              "repositories": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "name": "Santhosh Kumar Mittapally",
              "repositories": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "name": "Brad Friebe",
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "hackeastern"
                    }
                  },
                  {
                    "node": {
                      "name": "hackeastern"
                    }
                  },
                  {
                    "node": {
                      "name": "ChemStock"
                    }
                  },
                  {
                    "node": {
                      "name": "GlobeOilDiscordBot"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "name": "Nelson",
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "gofair"
                    }
                  },
                  {
                    "node": {
                      "name": "whistle"
                    }
                  },
                  {
                    "node": {
                      "name": "ps-tree"
                    }
                  },
                  {
                    "node": {
                      "name": "env"
                    }
                  },
                  {
                    "node": {
                      "name": "Enhance-PHP"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "name": "Li Peng",
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "MyTodo"
                    }
                  },
                  {
                    "node": {
                      "name": "DiskSpaceAnalyze"
                    }
                  },
                  {
                    "node": {
                      "name": "Chart.js"
                    }
                  },
                  {
                    "node": {
                      "name": "SampleOfRelection"
                    }
                  },
                  {
                    "node": {
                      "name": "LearnPython"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "name": null,
              "repositories": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "name": "Michal Paszkiewicz",
              "repositories": {
                "edges": [
                  {
                    "node": {
                      "name": "natural-selection"
                    }
                  },
                  {
                    "node": {
                      "name": "Cryptosaurus"
                    }
                  },
                  {
                    "node": {
                      "name": "MusicSite"
                    }
                  },
                  {
                    "node": {
                      "name": "MichalPaszkiewicz.github.io"
                    }
                  },
                  {
                    "node": {
                      "name": "platformer"
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}
*** Without mention query
  { 
    todos { 
      text
   } 
  } 
*** Fragment
  query { 
    todos { 
      ...Todo
      ...Todo1
   } 
  } 

  fragment Todo on Todo { 
    id  
  } 
  
  fragment Todo1 on Todo { 
    text
  }
*** Mutation
mutation {
   addTodo(text: "Finish my first GraphQL app") {
     id
  }
}
*** Metadata Query
{
   __type(name: "Todo") {
     description
   }
   __schema {
     types {
       name
     }
   }
}
** Request
{
  query: "# Type queries into this side of the screen, and you will ↵# see intelligent typeaheads aware of the current GraphQL type schema, ↵# live syntax, and validation errors highlighted within the text.↵↵# We'll get you started with a simple query showing your username!↵query { ↵  viewer {↵    id↵    name↵    company↵  }↵}"
  variables: {}
}
** Response
*** Success
{
  "data": 
  {
    "viewer":
    {
      "id":"MDQ6VXNlcjY0MzkxMg==",
      "name":"Wenjia Peng",
      "company":""
    }
  }
}
*** Failure
 {
  "errors": [
    {
      "message": "Syntax Error: Expected Name, found }",
      "locations": [
        {
          "line": 3,
          "column": 4
        }
      ]
    }
  ]
}   
* Reference
** GraphQL Data Loader
https://github.com/graphql/dataloader
** GraphQL to SQL
 https://github.com/stems/join-monster  
* Pros
** Demand Driven
** One quest, no request chain ( maynot be true when we talk about internal network )
** Adaptive with frequent UI change
** API for multi-front end
** Schema check
* Cons
** Performance 
   N+1 issue
** Cache Strategy Redesign
** Security
   DDos Attack
* Practice
git clone https://github.com/namelos/react-minimal-boilerplate
cd react-minimal-boilerplate 
npm install 
npm start

npm install graphql graphql-tools graphql-server-express --save 
mkdir server 
vim server/schema.js

npm install apollo-client apollo-boost react-apollo graphql-tag --save
* Scrathpad
- It is just a client side query language like SQL
- What it we write our own and translate it to Closure Rule + Porperty Set?
- Query what client need doesn't mean client is hands free. If data masaging is needed it is still needed. We only resolve the necessity of the data.
- We have JSON Schema in the system already...what is that??
* Rough Design
** API
   getData
   setData
** Input
   {
     queryString: <string>
     options: 
     [
       {
         name:  <string>
         value: <string>
       }
     ]
   }
** Output
   {
     output: <JSON string>
     status: {
       code: <int>
       msg:  <string>
     }
   }
     
